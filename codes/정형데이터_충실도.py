# -*- coding: utf-8 -*-
"""정형데이터_충실도.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zwcDyQCuEAWPbXWREr4DiREhjb1TIxFH
"""

import pandas as pd

def load_data(file_path):
    """Load data from a CSV file."""
    return pd.read_csv(file_path, na_values='null')

def clean_data(df):
    """Remove columns where all values are missing."""
    return df.dropna(axis=1, how='all')

def calculate_visits_per_subject(df):
    """Calculate the number of visits per patient."""
    return df.groupby('환자 번호').size()

def calculate_not_na_per_subject(df, not_na):
    """Calculate the number of non-missing values per patient."""
    return not_na.groupby(df['환자 번호']).sum()

def calculate_fidelity(not_na_per_subject, visits_per_subject):
    """Calculate fidelity for each patient."""
    return not_na_per_subject.div(visits_per_subject, axis=0)

def get_overall_mean_fidelity(fidelity):
    """Get the overall average fidelity."""
    fidelity_mean = fidelity.mean(axis=1)
    overall_mean_fidelity = fidelity_mean.mean()
    return f"전체 평균 충실도: {overall_mean_fidelity:.3f}"

def get_sorted_fidelity_table(fidelity):
    """Get the top 5 items with the lowest fidelity."""
    fidelity_by_item = fidelity.mean()
    fidelity_min_item = fidelity.min()
    fidelity_max_item = fidelity.max()
    fidelity_std_item = fidelity.std()

    result_df = pd.DataFrame({
        '충실도': fidelity_by_item,
        '최소': fidelity_min_item,
        '최대': fidelity_max_item,
        '표준편차': fidelity_std_item
    })

    sorted_result_df = result_df.sort_values(by='충실도').head(5)
    result_str = "\n충실도가 낮은 순으로 항목을 정렬했을 때, 상위 5개의 항목입니다:\n" + sorted_result_df.to_string()
    return result_str

if __name__ == "__main__":
    file_path = '/content/20231030_mimic_lab_sample.csv'
    data = load_data(file_path)
    cleaned_data = clean_data(data)
    not_na = cleaned_data.notna()
    visits_per_subject = calculate_visits_per_subject(cleaned_data)
    not_na_per_subject = calculate_not_na_per_subject(cleaned_data, not_na)
    fidelity = calculate_fidelity(not_na_per_subject, visits_per_subject)
    print(get_overall_mean_fidelity(fidelity))
    # Uncomment the next line to print the sorted fidelity table
    # print(get_sorted_fidelity_table(fidelity))