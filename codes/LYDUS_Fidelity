import yaml
import argparse
import gc
import numpy as np
import pandas as pd

def get_structured_fidelity(quiq:pd.DataFrame) -> pd.DataFrame:
 
    df = quiq.copy()
    df['Mapping_info_1'] = df['Mapping_info_1'].astype(str)
    df['Mapping_info_2'] = df['Mapping_info_2'].astype(str)
    df['Variable_type'] = df['Variable_type'].astype(str)
    #df['Is_categorical'] = pd.to_numeric(df['Is_categorical'], errors = 'coerce')

    df_results = pd.DataFrame(columns = ['Category', 'Original_table_name', 'Variable_name', 'Value', 'Patient_num', 'Mean', 'Std']) # 통합 데이터 프레임
    
    # Event
    print('\nCategory : Event')
    df_event = df.loc[df['Mapping_info_1'].str.contains('event', case = False, na = False)] # 숫자값 포함 O
    df_event = df_event.rename(columns = {'Mapping_info_1' : 'Category'}) 
    df_event['Category'] = 'Event'
    df_event = df_event.dropna(subset = ['Patient_id', 'Value'])
    
    if len(df_event) > 0 : 
    
        df_grouped = df_event.groupby(['Category', 'Original_table_name', 'Variable_name', 'Patient_id']).agg(
            Frequency = ('Value', 'count')
        ).reset_index()

        df_agg = df_grouped.groupby(['Category', 'Original_table_name', 'Variable_name']).agg(
            Patient_num = ('Patient_id', 'nunique'),
            Mean = ('Frequency', 'mean'),
            Std = ('Frequency', 'std')
        ).reset_index()

        df_agg['Value'] = np.nan

        df_results = pd.concat([df_results, df_agg.copy()], axis = 0)
    else : 
        print('FAIL - No available values found in the \'Event\' category.')
    
    gc.collect()
    
    
    # Diagnosis
    print('\nCategory : Diagnosis')
    df_diagnosis = df.loc[df['Mapping_info_1'].str.contains('diagnosis', case = False, na = False)]
    df_diagnosis = df_diagnosis[df_diagnosis['Is_categorical'] == 1] # 숫자값 포함 X
    df_diagnosis = df_diagnosis.rename(columns = {'Mapping_info_1' : 'Category'})
    df_diagnosis['Category'] = 'Diagnosis'
    df_diagnosis = df_diagnosis.dropna(subset = ['Patient_id', 'Value'])
    
    if len(df_diagnosis) > 0 : 
        df_diagnosis['Dummy'] = df_diagnosis['Value'].copy()
        df_grouped = df_diagnosis.groupby(['Category', 'Original_table_name', 'Variable_name', 'Value', 'Patient_id']).agg(
            Frequency = ('Dummy', 'count')
        ).reset_index()

        df_agg = df_grouped.groupby(['Category', 'Original_table_name', 'Variable_name', 'Value']).agg(
            Patient_num = ('Patient_id', 'nunique'),
            Mean = ('Frequency', 'mean'),
            Std = ('Frequency', 'std')
        ).reset_index()

        df_results = pd.concat([df_results, df_agg.copy()], axis = 0)
    else : 
        print('FAIL - No available values found in the \'Diagnosis\' category.')
        
    gc.collect()
    
    
    # Prescription
    print('\nCategory : Prescription')
    df_prescription = df.loc[df['Mapping_info_1'].str.contains('prescription', case = False, na = False)]
    df_prescription = df_prescription[df_prescription['Is_categorical'] == 1] # 숫자값 포함 X
    df_prescription = df_prescription.rename(columns = {'Mapping_info_1' : 'Category'})
    df_prescription['Category'] = 'Prescription'
    df_prescription = df_prescription.dropna(subset = ['Patient_id', 'Value'])
    
    if len(df_prescription) > 0 : 
        df_prescription['Dummy'] = df_prescription['Value'].copy()
        df_grouped = df_prescription.groupby(['Category', 'Original_table_name', 'Variable_name', 'Value', 'Patient_id']).agg(
            Frequency = ('Dummy', 'count')
        ).reset_index()

        df_agg = df_grouped.groupby(['Category', 'Original_table_name', 'Variable_name', 'Value']).agg(
            Patient_num = ('Patient_id', 'nunique'),
            Mean = ('Frequency', 'mean'),
            Std = ('Frequency', 'std')
        ).reset_index()

        df_results = pd.concat([df_results, df_agg.copy()], axis = 0)
    else : 
        print('FAIL - No available values found in the \'Prescription\' category.')
        
    
    # Procedure
    print('\nCategory : Procedure')
    df_procedure = df.loc[df['Mapping_info_1'].str.contains('procedure', case = False, na = False)]
    df_procedure = df_procedure[df_procedure['Is_categorical'] == 1] # 숫자값 포함 X
    df_procedure = df_procedure.rename(columns = {'Mapping_info_1' : 'Category'})
    df_procedure['Category'] = 'Procedure'
    df_procedure = df_procedure.dropna(subset = ['Patient_id', 'Value'])
    
    if len(df_procedure) > 0 : 
        df_procedure['Dummy'] = df_procedure['Value'].copy()
        df_grouped = df_procedure.groupby(['Category', 'Original_table_name', 'Variable_name', 'Value', 'Patient_id']).agg(
            Frequency = ('Dummy', 'count')
        ).reset_index()

        df_agg = df_grouped.groupby(['Category', 'Original_table_name', 'Variable_name', 'Value']).agg(
            Patient_num = ('Patient_id', 'nunique'),
            Mean = ('Frequency', 'mean'),
            Std = ('Frequency', 'std')
        ).reset_index()

        df_results = pd.concat([df_results, df_agg.copy()], axis = 0)
    else : 
        print('FAIL - No available values found in the \'Procedure\' category.')
    
    df_results['Mean'] = df_results['Mean'].round(2)
    df_results['Std'] = df_results['Std'].round(2)

    return df_results

if __name__ == '__main__' :
    print('<LYDUS - Fidelity>')
    
    parser = argparse.ArgumentParser()
    parser.add_argument('--config', type = str)
    args = parser.parse_args()
    
    with open(args.config, 'r', encoding = 'utf-8') as file :
        config = yaml.safe_load(file)
        
    quiq_path = config.get('quiq_path')
    quiq = pd.read_csv(quiq_path)
    save_path = config.get('save_path')
    
    df_results = get_structured_fidelity(quiq)

    total_num = df_results['Patient_num'].sum()
    mul_sum = (df_results['Patient_num'] * df_results['Mean']).sum()
    weighted_fidelity = mul_sum / total_num
    weighted_fidelity = round(weighted_fidelity, 2)
    
    with open(save_path + '/fidelity_total.txt', 'w', encoding = 'utf-8') as file :
        file.write(f'Weighted Fidelity = {weighted_fidelity}\n')
    
    df_results.to_csv(save_path + '/fidelity_summary.csv', index = False)
    
    print('\n<SUCCESS>')
